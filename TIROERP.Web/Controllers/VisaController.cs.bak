using System;
using System.Collections.Generic;
using System.Configuration;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using TIROERP.Core.Model;
using TIROERP.Core.RepositoryInterface;
using TIROERP.Web.App_Start;
using TIROERP.Web.Utilities;

namespace TIROERP.Web.Controllers
{
    [ErrorFilter]
    [Authenticate]
    public class VisaController : Controller
    {
        IVisa _iVisaRepository;

        public VisaController(IVisa iVisaRepository)
        {
            this._iVisaRepository = iVisaRepository;
        }

        // GET: Visa
        public ActionResult Index(int? id, string success = null)
        {
            DateTime? _fromDate = null;
            DateTime? _toDate = null;

            _fromDate = DateTime.Now;
            _toDate = DateTime.Now.AddDays(60);

            ViewBag.Success = success;
            return View(_iVisaRepository.GetAllVisa(Convert.ToInt32(id), _fromDate, _toDate));
        }

        [HttpPost]
        public ActionResult Index(string VisaNo, string FromDate, string ToDate)
        {
            DateTime? _fromDate = null;
            DateTime? _toDate = null;
            if (!string.IsNullOrEmpty(FromDate))
            {
                _fromDate = Convert.ToDateTime(FromDate);
            }
            else
            {
                _fromDate = DateTime.Now;
            }

            if (!string.IsNullOrEmpty(ToDate))
            {
                _toDate = Convert.ToDateTime(ToDate);
            }
            else
            {
                _toDate = _fromDate.Value.AddDays(60);
            }

            var result = _iVisaRepository.GetAllVisa(0, _fromDate, _toDate, VisaNo);
            return View(result);
        }

        public ActionResult Create()
        {
            GetClient(null);
            return View();
        }

        [HttpPost]
        public ActionResult Create(Visa visa, HttpPostedFileBase visaFile)
        {
            if (ModelState.IsValid)
            {
                if (visaFile != null)
                {
                    string filepath = Path.Combine(HttpContext.Server.MapPath(ConfigurationManager.AppSettings["VisaUploadedFiles"]));
                    visa.FILE_PATH = Common.UploadFile(visaFile, filepath);
                }
                _iVisaRepository.Create(visa);
                return RedirectToAction("Index", new { success = "Record Created Successfully!!!" });
            }
            else
            {
                GetClient();
                return View("Create", visa);
            }
        }

        public ActionResult Edit(int id)
        {
            GetClient();
            var getdetailsbyId = _iVisaRepository.GetAllVisa(id);
            var visa = getdetailsbyId.Select(c => new Visa
            {
                VISA_ID = c.VISA_ID,
                CIVILIAN_NUMBER = c.CIVILIAN_NUMBER,
                VISA_NUMBER = c.VISA_NUMBER,
                PURPOSE = c.PURPOSE,
                PLACE_OF_ENDORSEMENT = c.PLACE_OF_ENDORSEMENT,
                ISSUE_DATE = c.ISSUE_DATE,
                EXPIRY_DATE = c.EXPIRY_DATE,
                RECIEVED_DATE = c.RECIEVED_DATE,
                REGISTRATION_NUMBER = c.REGISTRATION_NUMBER,
                CLIENT_NAME = c.CLIENT_NAME,
                FILE_PATH = c.FILE_PATH,
                REMARK = c.REMARK,
                CREATED_BY = c.CREATED_BY,
                CREATED_DATE = c.CREATED_DATE
            }).SingleOrDefault();
            return View(visa);
        }

        [HttpPost]
        public ActionResult Edit(Visa visa, HttpPostedFileBase visaFile)
        {
            if (ModelState.IsValid)
            {
                if (visaFile != null)
                {
                    string filepath = Path.Combine(HttpContext.Server.MapPath(ConfigurationManager.AppSettings["VisaUploadedFiles"]));
                    visa.FILE_PATH = Common.UploadFile(visaFile, filepath);
                }
                _iVisaRepository.Edit(visa);
                return RedirectToAction("Index", new { success = "Record Updated Successfully!!!" });
            }
            else
            {
                GetClient();
                return View("Edit", visa);
            }
        }

        private void GetClient(string clientId = null)
        {
            var lstClient = from client in _iVisaRepository.GetClient().AsEnumerable<GetClient>()
                            select new
                            {
                                Value = Convert.ToString(client.REGISTRATION_NO),
                                Text = client.NAME,
                            };

            ViewBag.ClientList = new SelectList(lstClient, "Value", "Text", clientId);
        }

        [HttpPost]
        public JsonResult GetCivilianNo(string client_code)
        {
            return Json(_iVisaRepository.GetCivilianNo(client_code), JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult Delete(int id)
        {
            try
            {
                var getdetailsbyId = _iVisaRepository.GetAllVisa(id);
                var visa = getdetailsbyId.Select(c => new Visa
                {
                    VISA_ID = c.VISA_ID,
                    CIVILIAN_NUMBER = c.CIVILIAN_NUMBER,
                    VISA_NUMBER = c.VISA_NUMBER,
                    PURPOSE = c.PURPOSE,
                    PLACE_OF_ENDORSEMENT = c.PLACE_OF_ENDORSEMENT,
                    ISSUE_DATE = c.ISSUE_DATE,
                    EXPIRY_DATE = c.EXPIRY_DATE,
                    RECIEVED_DATE = c.RECIEVED_DATE,
                    REGISTRATION_NUMBER = c.REGISTRATION_NUMBER,
                    CLIENT_NAME = c.CLIENT_NAME,
                    FILE_PATH = c.FILE_PATH,
                    REMARK = c.REMARK,
                    CREATED_BY = c.CREATED_BY,
                    CREATED_DATE = c.CREATED_DATE
                }).SingleOrDefault();
                return View(visa);
            }
            catch (Exception)
            {
                return View("Delete");
            }

        }

        [HttpPost]
        public ActionResult Delete(Visa visa)
        {
            try
            {
                _iVisaRepository.Delete(visa);
                return RedirectToAction("Index");
            }
            catch (Exception)
            {
                return View(visa);
            }

        }

        [HttpPost]
        public JsonResult GetIndianDate(string date)
        {
            CultureInfo arCul;
            CultureInfo enCul;
            HijriCalendar h;
            GregorianCalendar g;
            arCul = new CultureInfo("ar-SA");
            enCul = new CultureInfo("en-US");

            h = new HijriCalendar();
            g = new GregorianCalendar(GregorianCalendarTypes.USEnglish);

            arCul.DateTimeFormat.Calendar = h;

            try
            {
                DateTime tempDate = DateTime.ParseExact(date, "dd/MM/yyyy",
                   arCul.DateTimeFormat, DateTimeStyles.AllowWhiteSpaces);
                string gregDate = Convert.ToString(tempDate.ToString("dd/MM/yyyy", enCul.DateTimeFormat));
                return Json(gregDate, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(ex.Message.ToString(), JsonRequestBehavior.AllowGet);
            }


        }
    }
}